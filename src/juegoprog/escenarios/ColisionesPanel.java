package juegoprog.escenarios;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.io.InputStream;
import java.awt.Graphics;
import java.awt.Graphics2D;


/**
 * Panel para gestionar las colisiones en el juego.
 * Carga una imagen de colisiones donde las √°reas no transparentes representan obst√°culos.
 */
public class ColisionesPanel extends JPanel {
    private BufferedImage colisionesImg;

    public ColisionesPanel() {
        setOpaque(false); // üîπ Hacemos que el panel sea invisible
        cargarImagenCollision();
    }

    private void cargarImagenCollision() {
        try {
            InputStream input = getClass().getClassLoader().getResourceAsStream("escenarios/colision_distrito_sombrio.png");
            if (input != null) {
                colisionesImg = ImageIO.read(input);
                System.out.println("‚úÖ Imagen de colisi√≥n cargada correctamente.");
            } else {
                System.out.println("‚ùå No se encontr√≥ la imagen de colisi√≥n en el classpath.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("‚ùå Error al cargar la imagen de colisi√≥n.");
        }
    }

    /**
     * M√©todo para verificar si hay colisi√≥n en una posici√≥n dada.
     * @param x Coordenada X en el mapa
     * @param y Coordenada Y en el mapa
     * @return `true` si el pixel no es transparente (colisi√≥n), `false` si es transparente (se puede caminar).
     */
    public boolean hayColision(int x, int y, int offsetX, int offsetY) {
        if (colisionesImg == null) return false; // Si la imagen no se carg√≥, no hay colisi√≥n

        int colisionX = x - offsetX; // üîπ Ajustamos la coordenada con el desplazamiento
        int colisionY = y - offsetY;

        // Validamos que est√© dentro del rango de la imagen
        if (colisionX < 0 || colisionX >= colisionesImg.getWidth() || colisionY < 0 || colisionY >= colisionesImg.getHeight()) {
            System.out.println("‚ùå Fuera del rango de la imagen de colisi√≥n -> X: " + colisionX + " | Y: " + colisionY);
            return false;
        }

        // Obtenemos el color del p√≠xel
        int pixel = colisionesImg.getRGB(colisionX, colisionY);
        int alpha = (pixel >> 24) & 0xff; // üîπ Extraemos el canal alfa

        // Debug: Imprimir si hay colisi√≥n o no
        System.out.println("üé® Posici√≥n: (" + colisionX + ", " + colisionY + ") - Color: " + Integer.toHexString(pixel) + " | Alfa: " + alpha);

        return alpha == 0;  // Invertimos la condici√≥n

    }




    public BufferedImage getImagenColision() {
        return colisionesImg;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (colisionesImg != null) {
            g.drawImage(colisionesImg, 0, 0, this); // üîπ Dibuja la imagen de colisi√≥n encima
        }
    }

    public void actualizarOffset(int offsetX, int offsetY) {
        setLocation(-offsetX, -offsetY); // üîπ Ajustamos la posici√≥n del panel en relaci√≥n con el fondo
        repaint();
    }


}

